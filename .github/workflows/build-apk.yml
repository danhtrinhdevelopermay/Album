name: Build Android APK

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  actions: read
  pull-requests: read

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run lint
        run: ./gradlew lintDebug

      - name: Upload lint reports
        uses: actions/upload-artifact@v4
        with:
          name: lint-reports
          path: app/build/reports/lint-results-debug.html

  test:
    runs-on: ubuntu-latest
    name: Unit tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run unit tests
        run: ./gradlew test

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: app/build/reports/tests/

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    name: Build APK
    permissions:
      contents: write
      actions: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build debug APK
        run: ./gradlew assembleDebug

      - name: Build release APK
        run: ./gradlew assembleRelease

      - name: Create Keystore
        if: github.ref == 'refs/heads/main'
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
        run: |
          if [ -n "$SIGNING_KEY" ]; then
            mkdir -p keystore
            echo "$SIGNING_KEY" | base64 --decode > keystore/release.keystore
            echo "Keystore created with size: $(stat -c%s keystore/release.keystore) bytes"
          else
            echo "No signing key provided, skipping keystore creation"
          fi
          
      - name: Sign Release APK
        id: sign_release
        if: github.ref == 'refs/heads/main'
        env:
          SIGNING_KEY: ${{ secrets.SIGNING_KEY }}
          KEY_STORE_PASSWORD: ${{ secrets.KEY_STORE_PASSWORD }}
          KEY_PASSWORD: ${{ secrets.KEY_PASSWORD }}
          ALIAS: ${{ secrets.ALIAS }}
        run: |
          if [ -n "$SIGNING_KEY" ] && [ -n "$KEY_STORE_PASSWORD" ] && [ -n "$KEY_PASSWORD" ] && [ -n "$ALIAS" ]; then
            echo "Verifying keystore..."
            keytool -list -keystore keystore/release.keystore -storepass "$KEY_STORE_PASSWORD" -v
            
            echo "Signing APK with jarsigner..."
            jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
              -keystore keystore/release.keystore \
              -storepass "$KEY_STORE_PASSWORD" \
              -keypass "$KEY_PASSWORD" \
              app/build/outputs/apk/release/app-release-unsigned.apk \
              "$ALIAS"
            
            echo "Aligning APK..."
            ${ANDROID_HOME}/build-tools/34.0.0/zipalign -v 4 \
              app/build/outputs/apk/release/app-release-unsigned.apk \
              app/build/outputs/apk/release/app-release-signed.apk
            
            echo "Verifying signed APK..."
            ${ANDROID_HOME}/build-tools/34.0.0/apksigner verify \
              app/build/outputs/apk/release/app-release-signed.apk
            
            echo "‚úÖ APK signed and verified successfully!"
            echo "Final APK size: $(stat -c%s app/build/outputs/apk/release/app-release-signed.apk) bytes"
          else
            echo "Signing credentials not available, skipping APK signing"
            echo "Release APK will remain unsigned"
          fi
          
      - name: Cleanup Keystore
        if: always() && github.ref == 'refs/heads/main'
        run: |
          rm -f keystore/release.keystore

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/

      - name: Upload Release APK
        uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/main'
        with:
          name: release-apk
          path: app/build/outputs/apk/release/app-release-*.apk

      - name: Create Release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        id: create_release
        continue-on-error: true
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: |
            Automated release from CI/CD pipeline
            
            Changes in this Release
            - Automated build from commit ${{ github.sha }}
            
            APK Build Information:
            - Debug APK: Successfully built and uploaded as artifact
            - Release APK: ${{ steps.sign_release.outcome == 'success' && 'Signed and ready' || 'Available as artifact' }}
          draft: false
          prerelease: false
          files: |
            app/build/outputs/apk/debug/app-debug.apk
            app/build/outputs/apk/release/app-release-*.apk

      - name: Release Status Summary
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "=== BUILD SUMMARY ==="
          echo "‚úÖ APK Build: SUCCESS"
          echo "‚úÖ Debug APK: Generated and uploaded as artifact"
          
          if [ "${{ steps.create_release.outcome }}" == "success" ]; then
            echo "‚úÖ GitHub Release: Created successfully (v${{ github.run_number }})"
          else
            echo "‚ö†Ô∏è  GitHub Release: Failed to create (likely due to token permissions)"
            echo "üí° APKs are still available as workflow artifacts"
            echo "üí° To fix: Grant 'contents: write' permission to GITHUB_TOKEN in repository settings"
          fi
          
          echo ""
          echo "=== DOWNLOAD LINKS ==="
          echo "üîó Workflow artifacts: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
name: Build Android APK

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    runs-on: ubuntu-latest
    name: Lint check
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run lint
        run: ./gradlew lintDebug

      - name: Upload lint reports
        uses: actions/upload-artifact@v4
        with:
          name: lint-reports
          path: app/build/reports/lint-results-debug.html

  test:
    runs-on: ubuntu-latest
    name: Unit tests
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Run unit tests
        run: ./gradlew test

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-reports
          path: app/build/reports/tests/

  build:
    runs-on: ubuntu-latest
    needs: [lint, test]
    name: Build APK
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Cache Gradle packages
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Build debug APK
        run: ./gradlew assembleDebug

      - name: Build release APK
        run: ./gradlew assembleRelease

      - name: Create Keystore
        if: github.ref == 'refs/heads/main' && secrets.SIGNING_KEY
        run: |
          mkdir -p keystore
          echo "${{ secrets.SIGNING_KEY }}" | base64 --decode > keystore/release.keystore
          echo "Keystore created with size: $(stat -c%s keystore/release.keystore) bytes"
          
      - name: Sign Release APK
        if: github.ref == 'refs/heads/main' && secrets.SIGNING_KEY
        run: |
          echo "Verifying keystore..."
          keytool -list -keystore keystore/release.keystore -storepass "${{ secrets.KEY_STORE_PASSWORD }}" -v
          
          echo "Signing APK with jarsigner..."
          jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \
            -keystore keystore/release.keystore \
            -storepass "${{ secrets.KEY_STORE_PASSWORD }}" \
            -keypass "${{ secrets.KEY_PASSWORD }}" \
            app/build/outputs/apk/release/app-release-unsigned.apk \
            "${{ secrets.ALIAS }}"
          
          echo "Aligning APK..."
          ${ANDROID_HOME}/build-tools/34.0.0/zipalign -v 4 \
            app/build/outputs/apk/release/app-release-unsigned.apk \
            app/build/outputs/apk/release/app-release-signed.apk
          
          echo "Verifying signed APK..."
          ${ANDROID_HOME}/build-tools/34.0.0/apksigner verify \
            app/build/outputs/apk/release/app-release-signed.apk
          
          echo "âœ… APK signed and verified successfully!"
          echo "Final APK size: $(stat -c%s app/build/outputs/apk/release/app-release-signed.apk) bytes"
          
      - name: Cleanup Keystore
        if: always() && github.ref == 'refs/heads/main'
        run: |
          rm -f keystore/release.keystore

      - name: Upload Debug APK
        uses: actions/upload-artifact@v4
        with:
          name: debug-apk
          path: app/build/outputs/apk/debug/

      - name: Upload Release APK (Unsigned)
        uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/main' && !secrets.SIGNING_KEY
        with:
          name: release-apk-unsigned
          path: app/build/outputs/apk/release/app-release-unsigned.apk
          
      - name: Upload Release APK (Signed)
        uses: actions/upload-artifact@v4
        if: github.ref == 'refs/heads/main' && secrets.SIGNING_KEY
        with:
          name: release-apk-signed
          path: app/build/outputs/apk/release/app-release-signed.apk

      - name: Create Release
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body: |
            Automated release from CI/CD pipeline
            
            Changes in this Release
            - Automated build from commit ${{ github.sha }}
          draft: false
          prerelease: false
          files: |
            app/build/outputs/apk/debug/app-debug.apk
            app/build/outputs/apk/release/app-release-*.apk